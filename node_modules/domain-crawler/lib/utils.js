var fs = require("fs");
var _ = require("underscore");


/**
 * 过滤爬取到的噪音数据
 * @param  {String} text 待匹配字符串
 * @return {Boolean}     若符合域名格式，则返回true，否则返回false
 */
exports.filterDomain = function (text) {

	var reg = /(http|https):\/\/([^\/]+)/ig;
	return reg.test(text);
};

/**
 * 过滤出lvyou.baidu.com相关网站进行递归多级爬取
 * @param  {String} text 待匹配字符串
 * @return {Boolean}     若符合域名格式，则返回true，否则返回false
 */
exports.filterLvDomain = function (text) {
	var reg = /lvyou/ig;
	return reg.test(text);
};

/**
 * 过滤数组中重复值
 * @param  {Array} array 待处理数组
 * @return {[type]}      处理后数组
 */
exports.unique = function (array) {
	return _.uniq(array);
	// var n = {},r=[];
	// for(var i = 0; i < array.length; i++) 
	// {
	// 	if (!n[array[i]]) 
	// 	{
	// 		n[array[i]] = true;
	// 		r.push(array[i]);
	// 	}
	// }
	// return r;
};

/**
 * 接受一个数组，转化成列表文本输出
 * @param  {Array} array 待处理数组
 * @return {String}      返回列表文本，列表文本就是单独字符串独占一行
 */
exports.array2ListStr = function (array) {

	var list_str = "";
	for (var i in array) {
		list_str += (array[i] + "\n"); 
	}
	return list_str;
}


/**
 * 清空path指向的文件
 * @param  {String} path 待处理文件路径
 */
exports.cleanFile = function (path) {

	if(fs.existsSync(path)) {
		fs.unlinkSync(path);
	};
};

/**
 * 在文件尾部追加内容
 * @param  {String} path    待追加文件的路径
 * @param  {String} content 追加的内容
 * @param  {String} commit  对追加内容的描述
 */
exports.appendFile = function (path, content, commit) {
	
	var content = commit ? "// " + commit + ":\n\n\n" + content + "\n" : "// " + "栏目\n\n" + "\n" + content + "\n";
	fs.appendFile(path, content, function(err) {
		if (err) {
			// console.log(err);
			throw err;
		} else {
			// console.log("成功写入 " + commit + " 栏目");
		};
	});
};

/**
 * 获取单一标签集合
 * @param  {String} tagName 标签名称
 * @return {Array}          标签集合
 */
exports.getTagArray = function (document, tagName) {

	var rawTags = document(tagName);
		tagArray = rawTags.toArray();
	return tagArray;
};

exports.traverseDom = function (curr_element, type) { 
   	
	var typeMap = {
		"comment" : {"nodeName" : "#comment", "nodeType" : 8},
		"data-sharpsrc" : {"nodeName" : "data-sharpsrc", "nodeType" : 2}
	};

    var elements = new Array();  
    
    if (curr_element.nodeName == typeMap[type]["nodeName"] || curr_element.nodeType == typeMap[type]["nodeType"]) {     

        elements[elements.length] = curr_element;     
    }    
    else if(curr_element.childNodes.length>0) {    
        for (var i = 0; i<curr_element.childNodes.length; i++) {    
    	
            elements = elements.concat(traverseDom(curr_element.childNodes[i], type));        
        }     
    }   

    return elements;   
};