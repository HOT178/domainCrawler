var http = require('http');
var superagent = require('superagent');
var cheerio = require('cheerio');
var promise = require('promise');
var fs = require('fs');
var _ = require('underscore');
var utils = require('./utils');

var RECORD_PATH = "result.txt";

// Crawler构造函数
var Crawler = function(config) {


	var _this = this;

	config = this.config = config;

	var load_html_promise = new promise(function(resolve, reject) {

		http.get(config.url, function(res) {
			var html = '';
			res.on('data', function(data) {
				html += data;
			});
			res.on('end', function() {
				$ = _this.$ = cheerio.load(html);
				resolve(html);
			})
		});
	});
 	
 	utils.cleanFile(RECORD_PATH);

	this.init = load_html_promise;
	return this;
};


// Crawler需要保持静态，可以内部再维护一个crawler
Crawler.prototype.crawl = function() {

	// 这个好像会很大，所以需要做清理操作
	// 模块内部定义的全局是属于模块域下的

	this.getTags(this.config["tag"]);
	this.getDomains();
};


Crawler.prototype.getAttrDomain = function (attrs) {
	for(var i in attrs) {
		var elements = utils.traverseDom($("html")[0], attrs[i]); 
	}
};

Crawler.prototype.getCommentDomain = function () {

	var comments = utils.traverseDom($("html")[0], "comment"); 
	var domains = [];
	// !
	var reg = /(http|https):\/\/([^\/]+)\//ig;
	(function(){
		for (var i in comments) {
			var result = comments[i]["nodeValue"].match(reg);
			if(result) {
				for(var j in result) {
					domains.push(result[j].split("/")[2]);
				}
			}
		}
	})();
	return domains;
};

Crawler.prototype.getInlineDomain = function() {
	var inlinescripts = utils.getTags("script").filter(function(item){
		if(item.src === "") { return true; }
		else { return false; }
	});

	var reg = /(http|https):\/\/([^\/]+)\//ig;
	var result = [];
	for(var i in inlinescripts) {
		var matchedDomain = inlinescripts[i].innerHTML.match(reg);
		if(matchedDomain) {
			// 需要遍历
			var domain = (inlinescripts[i].innerHTML.match(reg))[0].split("/")[2];
			result.push(domain);
		}
	}
	return result;
};

Crawler.prototype.getTags = function(tag_map) {

	this.tagInfo = {};
	this.tags = [];
	this.urls = [];
	var tagInfo = this.tagInfo,
		_this = this;

	for(var key in tag_map) {
		var tagName = key;
		tagInfo[tagName] = {};
		var attr = tag_map[key];

		if(typeof(attr) !== "string") {
			for(var i in attr) {
				setTagInfo(tagName, attr[i]);
			}
		} else {
			setTagInfo(tagName, attr);
		}
	};

	// 需要缩减
	function setTagInfo (tagName, attr) {



		var tags = utils.getTags(tagName).filter(function(el){

			return el.attribs[attr] && el.attribs[attr] !== "";
		});


		// ! 需要处理
		tagInfo[tagName]["tag"] = tagInfo[tagName]["tag"] || [];
		tagInfo[tagName]["url"] = tagInfo[tagName]["url"] || [];

		tagInfo[tagName]["tag"] = tagInfo[tagName]["tag"].concat(tags);
		var urls = tagInfo[tagName]["url"] = tagInfo[tagName]["url"].concat((function(t){
			var tagUrl = [];
			for(var i in t) {
				tagUrl.push(tags[i]["attribs"][attr]);
			}
			return tagUrl;
		})(tags));

		_this.tags = _this.tags.concat(tags);
		_this.urls = _this.urls.concat(urls);

		// console.log(_this.tags);
		// console.log(_this.urls);
	};

	var url_list_str = "";
	for(var i in this.urls) {
		url_list_str += (this.urls[i] + "\n");
	}

	utils.appendFile(RECORD_PATH, url_list_str, "tags");

};

// 获得一个以域组成的数组
Crawler.prototype.getDomains = function() {


	this.domains = [];
	var urls = this.urls;
	for(var i in urls) {
		var domain = urls[i].split("/")[2];

		// !
		if(domain) {this.domains.push(domain);}
	};

	if (this.config.mode.indexOf("i") !== -1) {
		var inlineDomain = this.getInlineDomain();
		this.domains.concat(inlineDomain);
		this.tagInfo["inlineScript"] = {};
		this.tagInfo["inlineScript"]["domain"] = inlineDomain;
	} 
	if (this.config.mode.indexOf("c") !== -1) {
		var commentDomain = this.getCommentDomain();
		this.domains.concat(commentDomain);
		this.tagInfo["comment"] = {};
		this.tagInfo["comment"]["domain"] = commentDomain;
	}

	var domain_list_str = "";
	for(var i in this.domains) {
		domain_list_str += (this.domains[i] + "\n");
	}

	utils.appendFile(RECORD_PATH, domain_list_str, "domains");
};

Crawler.prototype.getUniqueDomain = function() {

	return utils.unique(this.domains);
};

module.exports = Crawler;
