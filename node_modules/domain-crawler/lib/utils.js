var fs = require("fs");

exports.unique = function (array) {
	var n = {},r=[];
	for(var i = 0; i < array.length; i++) 
	{
		if (!n[array[i]]) 
		{
			n[array[i]] = true;
			r.push(array[i]);
		}
	}
	return r;
};

// 清空文件 ! 需要重写
// 需要异步
exports.cleanFile = function (path) {

	if(fs.existsSync(path)) {
		fs.unlinkSync(path);
	};
};

// 在文件尾部追加
exports.appendFile = function (path, content, commit) {
	
	var content = commit ? "// " + commit + ":\n\n\n" + content + "\n" : "// " + "栏目\n\n" + "\n" + content + "\n";
	fs.appendFile(path, content, function(err) {
		if (err) {
			console.log(err)
			throw err;
		};
	});
};

exports.getTags = function (tagName) {

	var rawTags = $(tagName);
		tagArray = rawTags.toArray();
	return tagArray;
};

exports.traverseDom = function (curr_element, type) { 
   	
	var typeMap = {
		"comment" : {"nodeName" : "#comment", "nodeType" : 8},
		"data-sharpsrc" : {"nodeName" : "data-sharpsrc", "nodeType" : 2}
	};

    var elements = new Array();  
    
    if (curr_element.nodeName == typeMap[type]["nodeName"] || curr_element.nodeType == typeMap[type]["nodeType"]) {     

        elements[elements.length] = curr_element;     
    }    
    else if(curr_element.childNodes.length>0) {    
        for (var i = 0; i<curr_element.childNodes.length; i++) {    
    	
            elements = elements.concat(traverseDom(curr_element.childNodes[i], type));        
        }     
    }   
    return elements;   
};